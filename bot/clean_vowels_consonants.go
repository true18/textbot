package bot

import (
	"fmt"
	"strings"
	"vkbot/state"
	"vkbot/vk"
)

// CleanVowelsConsonantsCommand –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–ª–∞—Å–Ω—ã—Ö –∏–ª–∏ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö
func CleanVowelsConsonantsCommand(e Event) {
	state.FuncState.Add(e.msg.PeerID, CleanVowelsConsonants)

	kb := vk.CreateKeyboard(true, false, [][]vk.Button{
		{
			vk.AddButton("–£–¥–∞–ª–∏—Ç—å –≥–ª–∞—Å–Ω—ã–µ", CleanVowels, vk.KbPrimary),
		},
		{
			vk.AddButton("–£–¥–∞–ª–∏—Ç—å —Å–æ–≥–ª–∞—Å–Ω—ã–µ", CleanConsonants, vk.KbDefault),
		},
		{
			vk.AddButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", Close, vk.KbNegative),
		},
	})

	_ = e.c.SendMessage(e.msg.PeerID, "–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –±—É–∫–≤—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å"+
		"\n\n–í–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä: \"–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!\" ‚Üí \"–í—Å–º –ø—Ä–≤—Ç!\"\n–ù–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä: \"–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!\" ‚Üí \"–µ –∏–µ!\""+
		"\n\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç.", kb.String(), "", 0)
}

// CleanVowelsConsonantsSelect –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É–¥–∞–ª–µ–Ω–∏—è –±—É–∫–≤
func CleanVowelsConsonantsSelect(e Event, value int) {
	state.FuncState.Add(e.msg.PeerID, value)

	kb := vk.CreateKeyboard(false, false, [][]vk.Button{
		{
			vk.AddButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", Close, vk.KbPrimary),
		},
	})

	text := "–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ %s –±—É–∫–≤. –ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∞ —è –±—É–¥—É —É–¥–∞–ª—è—Ç—å –∏–∑ –Ω–µ–≥–æ %s –±—É–∫–≤—ã." +
		"\n\n–î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ó–∞–≤–µ—Ä—à–∏—Ç—å\" "

	if value == CleanVowels {
		_ = e.c.SendMessage(e.msg.PeerID, fmt.Sprintf(text, "–≥–ª–∞—Å–Ω—ã—Ö", "–≥–ª–∞—Å–Ω—ã–µ"), kb.String(), "", 0)
	} else if value == CleanConsonants {
		_ = e.c.SendMessage(e.msg.PeerID, fmt.Sprintf(text, "—Å–æ–≥–ª–∞—Å–Ω—ã—Ö", "—Å–æ–≥–ª–∞—Å–Ω—ã–µ"), kb.String(), "", 0)
	} else {
		_ = e.c.SendMessage(e.msg.PeerID, "–ü—Ä–æ–∏–∑–æ—à–ª–æ –Ω–µ —Å–æ–≤—Å–µ–º —Ç–æ, —á—Ç–æ —è –æ–∂–∏–¥–∞–ª ü§î", "", "", 0)
	}
}

// CleanVowelsConsonantsHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ state –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// —Ä–∞–≤–µ–Ω CleanVowels –∏–ª–∏ CleanConsonants
func CleanVowelsConsonantsHandler(e Event, state int) {
	if state == CleanVowels {
		result := RemoveVowels(e.msg.Text)
		if result == "" {
			result = "–ü–æ–ª—É—á–∏–ª—Å—è –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
		}
		_ = e.c.SendMessage(e.msg.PeerID, result, "", "", e.msg.ConversationMessageID)
	} else if state == CleanConsonants {
		result := RemoveConsonants(e.msg.Text)
		if result == "" {
			result = "–ü–æ–ª—É—á–∏–ª—Å—è –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
		}

		_ = e.c.SendMessage(e.msg.PeerID, result, "", "", e.msg.ConversationMessageID)
	} else {
		_ = e.c.SendMessage(e.msg.PeerID, "–ü—Ä–æ–∏–∑–æ—à–ª–æ –Ω–µ —Å–æ–≤—Å–µ–º —Ç–æ, —á—Ç–æ —è –æ–∂–∏–¥–∞–ª ü§î", "", "", 0)
	}
}

// RemoveVowels —É–¥–∞–ª—è–µ—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≥–ª–∞—Å–Ω—ã–µ –±—É–∫–≤—ã
func RemoveVowels(input string) string {
	vowels := []string{"a", "e", "i", "o", "u", "A", "E", "I", "O", "U", "–∞", "–µ", "—ë", "–∏", "–æ",
		"—É", "—ã", "—ç", "—é", "—è", "–ê", "–ï", "–Å", "–ò", "–û", "–£", "–´", "–≠", "–Æ", "–Ø"}

	for _, vowel := range vowels {
		input = strings.ReplaceAll(input, vowel, "")
	}

	return input
}

// RemoveConsonants —É–¥–∞–ª—è–µ—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å–æ–≥–ª–∞—Å–Ω—ã–µ –±—É–∫–≤—ã
func RemoveConsonants(input string) string {
	consonants := []string{"b", "c", "d", "f", "g", "h", "j", "k", "l", "m", "n", "p",
		"q", "r", "s", "t", "v", "w", "x", "y", "z",
		"B", "C", "D", "F", "G", "H", "J", "K", "L", "M", "N", "P",
		"Q", "R", "S", "T", "V", "W", "X", "Y", "Z",
		"–±", "–≤", "–≥", "–¥", "–∂", "–∑", "–π", "–∫", "–ª", "–º", "–Ω", "–ø", "—Ä", "—Å", "—Ç",
		"—Ñ", "—Ö", "—Ü", "—á", "—à", "—â", "–ë", "–í", "–ì", "–î", "–ñ", "–ó", "–ô", "–ö", "–õ", "–ú", "–ù", "–ü", "–†", "–°", "–¢",
		"–§", "–•", "–¶", "–ß", "–®", "–©"}

	for _, consonant := range consonants {
		input = strings.ReplaceAll(input, consonant, "")
	}

	return input
}
